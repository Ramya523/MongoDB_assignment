Find documents:
 
 1. get all documents
 Sol: db.movies.find().pretty()

 2. get all documents with writer set to "Quentin Tarantino"
 Sol: db.movies.find({writer : "Quentin Tarantino"}).pretty()
  
 3. get all documents where actors include "Brad Pitt"
 Sol: db.movies.find({actors: {$in: ['Brad Pitt']}}).pretty()
 
 4. get all documents with franchise set to "The Hobbit"
  Sol: db.movies.find({franchise : "The Hobbit"}).pretty()

 5. get all movies released in the 90s
 Sol: db.movies.find({ $and: [{"year": { $gte:1989}}, {"year": {$lt:2000}}]}).pretty()
 
 6. get all movies released before the year 2000 or after 2010
 Sol: db.movies.find({ $or: [{"year": { $gte:2010}}, {"year": {$lt:2000}}]}).pretty()
 
 
  Update Documents:
  
  1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the
  Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from
  the dragon Smaug."
  
  Sol: db.movies.update({title: "The Hobbit: An Unexpected Journey"}, {$set: {synopsis: "A reluctant hobbit, Bilbo 
  Baggins,  sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and 
  the gold within it - from the dragon Smaug."}})
  
  
  2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf
  the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of 
  a mysterious and magical ring."
  
  Sol: db.movies.update({title: "The Hobbit: The Desolation of Smaug"}, {$set: {synopsis:"The dwarves, along with
  Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo 
  Baggins is in possession of a mysterious and magical ring."}})
  
  
 3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
 Sol: db.movies.update({title: "Pulp Fiction"}, {$addToSet: {actors: "Samuel L. Jackson"}})
 
 
Searching documents:

 
 1. find all movies that have a synopsis that contains the word "Bilbo"
 Sol: db.movies.find({synopsis: {$regex : ".*Bilbo.*"}}).pretty()
 
 2. find all movies that have a synopsis that contains the word "Gandalf"
 Sol: db.movies.find({synopsis: {$regex : ".*Gandalf.*"}}).pretty()
 
 3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
  Sol:db.movies.find({$and:[{synopsis:/Bilbo/},{synopsis: {$not:/Gandalf/}}]}).pretty() 
   
 4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
 Sol: db.movies.find({ $or: [{synopsis: {$regex : ".*dwarves.*"}}, {synopsis: {$regex : ".*hobbit.*"}}]}).pretty()
 
 5. find all movies that have a synopsis that contains the word "gold" and "dragon"
 Sol: db.movies.find({ $and: [{synopsis: {$regex : ".*gold.*"}}, {synopsis: {$regex : ".*dragon.*"}}]}).pretty()
 
 
 

 
 
 Delete Documents:
 
 1. delete the movie "Pee Wee Herman's Big Adventure"
 Sol: db.movies.remove({title: "Pee Wee Herman's Big Adventure"})
 
 2. delete the movie "Avatar"
 Sol: db.movies.remove({title: "Avatar"})
 
 

 
 
 Querying related collections:
 
 1. find all users
 Sol: db.users.find().pretty()
 
 2. find all posts
  Sol: db.posts.find().pretty()
  
 3. find all posts that was authored by "GoodGuyGreg"
 Sol: db.posts.find({username: "GoodGuyGreg"}).pretty()
 
 4. find all posts that was authored by "ScumbagSteve"
 Sol: db.posts.find({username: "ScumbagSteve"}).pretty()
 
 5. find all comments
 db.comments.find().pretty()
 
 6. find all comments that was authored by "GoodGuyGreg"
  Sol: db.comments.find({username: "GoodGuyGreg"}).pretty()
 
 7. find all comments that was authored by "ScumbagSteve" 
 Sol: db.comments.find({username: "ScumbagSteve"}).pretty()
 
 8.find all comments belonging to the post "Reports a bug in your code"
 Sol: db.comments.find({post: "5d5a8d35b8b3071523e83b17"}).pretty()
 






